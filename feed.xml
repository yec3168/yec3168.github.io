<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://yec3168.github.io//</id><title>Eungchan Blog</title><subtitle>hello.</subtitle> <updated>2023-08-03T18:57:08+09:00</updated> <author> <name>Eungchan</name> <uri>https://yec3168.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://yec3168.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://yec3168.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Eungchan </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>nodejs GET, POST</title><link href="https://yec3168.github.io//posts/nodejs_basis2/" rel="alternate" type="text/html" title="nodejs GET, POST" /><published>2023-08-03T00:00:00+09:00</published> <updated>2023-08-03T18:56:35+09:00</updated> <id>https://yec3168.github.io//posts/nodejs_basis2/</id> <content src="https://yec3168.github.io//posts/nodejs_basis2/" /> <author> <name>Eungchan</name> </author> <category term="Node.js" /> <category term="basis" /> <summary> Get 요청 app.get('/', (req, res) =&amp;gt; { res.send('Hello World!') }) 위 코드처럼 주소창에서 데이터를 같이 넘기는 방식.(localhost:3000같은 주소창으로 접근 ) 위와 같은 형태로 콜백함수에 전달된 req객체를 이용하면 get 방식으로 요청이 들어오면 데이터를 가져와서 html 파일에 적용할 수 있다. req : request res : response query, 파라미터 값으로 라우팅 파라미터 app.get('/user/:id', (req, res) =&amp;gt; { //파라미터 const p = req.params; console.log(p) res.json({'userid': p.id}) ... </summary> </entry> <entry><title>nodejs 1일차</title><link href="https://yec3168.github.io//posts/nodejs_basis/" rel="alternate" type="text/html" title="nodejs 1일차" /><published>2023-07-28T00:00:00+09:00</published> <updated>2023-08-03T18:56:35+09:00</updated> <id>https://yec3168.github.io//posts/nodejs_basis/</id> <content src="https://yec3168.github.io//posts/nodejs_basis/" /> <author> <name>Eungchan</name> </author> <category term="Node.js" /> <category term="basis" /> <summary> information 주변에서 말하길 배워두면 써먹을 곳이 많은 언어중 하나이다. 남들이 다 추천하면서 꼭 배워두는것이 좋다고 말하여 나도 한번 공부해보자고 생각해서 시작한다. Node.js Node.js는 내 컴퓨터 혹은 서버에서 돌리는 백엔드이다. 자바스크립트를 이용하여 만들고, npm이라는 언어를 사용하여 모듈을 가져와서 조합해서 사용한다고 한다. 기존의 자바스크립트는 브라우저를 통해 실행하였는데 nodejs를 사용하면 따로 브라우저 없이도 실행이 가능하다. Install Node.js Node.js에 들어가 안정적, 신뢰도 높은이 적혀있는 버전을 다운받자. 설치가 완료되면 Visual Studio Code를 열어 자신이 원하는 위치에 폴더 하나를 생성하자. index.js파일을 만들... </summary> </entry> <entry><title>정보처리기사 실기 공부 2</title><link href="https://yec3168.github.io//posts/license2/" rel="alternate" type="text/html" title="정보처리기사 실기 공부 2" /><published>2023-07-09T00:00:00+09:00</published> <updated>2023-08-03T18:56:35+09:00</updated> <id>https://yec3168.github.io//posts/license2/</id> <content src="https://yec3168.github.io//posts/license2/" /> <author> <name>Eungchan</name> </author> <category term="license" /> <category term="정처기" /> <summary> 데이터베이스 데이터 저장소, 데이터베이스 , DBMS 데이터 저장소 데이터를 논리적인 구조로 조직화 하거나, 물리적인 공간에 구축한 것을 의미 데이터 베이스 공동으로 사용될 데이터를 중복을 배제하여 통합 데이터를 저장장치에 저장하는 것 DBMS 데이테베이스를 관리해주는 소프트웨어 정의, 조작, 제어 기능이 존재 스키마 데이터베이스의 구조와 제약조건을 기술한 것. 외부스키마 사용자나 프로그래머의 입장에서 데이터 베이스의 논리적 구조를 정의한 것 개념 스키마 데이터 베이스의 논리적 구조 ... </summary> </entry> <entry><title>정보처리기사 실기 공부 1</title><link href="https://yec3168.github.io//posts/license1/" rel="alternate" type="text/html" title="정보처리기사 실기 공부 1" /><published>2023-07-05T00:00:00+09:00</published> <updated>2023-08-03T18:56:35+09:00</updated> <id>https://yec3168.github.io//posts/license1/</id> <content src="https://yec3168.github.io//posts/license1/" /> <author> <name>Eungchan</name> </author> <category term="license" /> <category term="정처기" /> <summary> 소프트웨어 설계 요구사항 분석 소프트웨어 생명주기 (Software development life cycle) 시스템의 요구분석 부터 유지보수까지 모든 부분을 체계화한 절차. 단계별로 정리. 1. 요구사항 분석(명세화) 요구사항을 결정하는 단계, 실제 사용자와 함께 정의하는 단계 4. 테스트(시험) 화이트 박스 모듈의 코드를 오픈시킨 상태에서 원스코드의 논리적인 모든경로를 테스트 하는 방법 모든 문장을 한 번 이상 실행함. 기초경로검사(Base Path Testing), 제어 구조검사(Control Structure Testing) 문장검증기준, 분기검증기준, 조건검증기준, 분기/조건기준 블랙박스 블랙박스 테스트는 각 기능이 완전히 작동하는 것을 입증하는... </summary> </entry> <entry><title>Data Analysis 2(API)</title><link href="https://yec3168.github.io//posts/Data_analysis2/" rel="alternate" type="text/html" title="Data Analysis 2(API)" /><published>2023-07-04T00:00:00+09:00</published> <updated>2023-08-03T18:56:35+09:00</updated> <id>https://yec3168.github.io//posts/Data_analysis2/</id> <content src="https://yec3168.github.io//posts/Data_analysis2/" /> <author> <name>Eungchan</name> </author> <category term="Data_Analysis" /> <category term="basis" /> <summary> API 인증된 URL만 있으면 언제든지 필요한 데이터에 접근할 수 있는 방식. 보통 CSV, JSON, XML을 사용한다. JSON 파이썬의 Dictionary + List 해놓은 것 d ={"name": "Eungchan", "age": "25"} print(d["age"]) -&amp;gt; 25 json.dumps() 파이썬의 json패키지를 사용해서 dictionary를 json형식에 맞는 문자열로 바꿔줌. 아까만든 dictionary인 d를 JSON 형식에 맞는 문자열로 변환해보자. json 패키지 import import json json.dumps사용 d_str = json.dumps(d, ensure_ascii = False) print(d_... </summary> </entry> </feed>
